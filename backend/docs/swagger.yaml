basePath: /api/v1
definitions:
  dto.BookResponse:
    properties:
      author:
        type: string
      created_at:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
  dto.CreateBookRequest:
    properties:
      author:
        maxLength: 255
        minLength: 1
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
      year:
        minimum: 0
        type: integer
    required:
    - author
    - title
    - year
    type: object
  dto.UpdateBookRequest:
    properties:
      author:
        maxLength: 255
        minLength: 1
        type: string
      title:
        maxLength: 255
        minLength: 1
        type: string
      year:
        minimum: 0
        type: integer
    type: object
  dto.UrlProcessRequest:
    properties:
      operation:
        enum:
        - canonical
        - redirection
        - all
        type: string
      url:
        type: string
    required:
    - operation
    - url
    type: object
  dto.UrlProcessResponse:
    properties:
      processed_url:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      error: {}
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: ybulac@gmail.com
    name: Yusuf Bulac
  description: Book API for byFood case study
  title: ByFood Case API
  version: "1.0"
paths:
  /books:
    get:
      description: Returns a list of all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.BookResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Creates a new book with the given payload
      parameters:
      - description: Create Book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Deletes a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a book
      tags:
      - books
    get:
      description: Returns a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Updates an existing book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Book
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update a book
      tags:
      - books
  /url/transform:
    post:
      consumes:
      - application/json
      description: Apply canonical, redirection, or all transformations to a URL
      parameters:
      - description: URL request payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UrlProcessRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UrlProcessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Transform a URL
      tags:
      - url
swagger: "2.0"
